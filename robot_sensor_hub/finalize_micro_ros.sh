#!/bin/bash
PROJECT_ROOT="/home/ros2/robot_sensor_hub/robot_sensor_hub"
echo "=== Finalizing micro-ROS setup with custom messages ==="

# --- –®–∞–≥ 1: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ ---
chmod +x generate_msgs.sh || true
chmod +x update_libmicroros.sh || true

# --- –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è ---
echo "‚úÖ Step 1: Generating message headers and sources..."
./generate_msgs.sh

if [ ! -d "$PROJECT_ROOT/build_msgs/build_colcon" ]; then
    echo "‚ùå ERROR: colcon build failed. Check generate_msgs.sh."
    exit 1
fi

# --- –®–∞–≥ 3: –ù–∞—Ö–æ–¥–∏–º .c —Ñ–∞–π–ª—ã ---
DEVICE_DATA_C="$PROJECT_ROOT/build_msgs/build_colcon/robot_sensor_hub/rosidl_generator_c/robot_sensor_hub/msg/detail/device_data__functions.c"
DEVICE_COMMAND_C="$PROJECT_ROOT/build_msgs/build_colcon/robot_sensor_hub/rosidl_generator_c/robot_sensor_hub/msg/detail/device_command__functions.c"

if [ ! -f "$DEVICE_DATA_C" ] || [ ! -f "$DEVICE_COMMAND_C" ]; then
    echo "‚ùå ERROR: Generated C files not found!"
    echo "Looking for:"
    echo "  $DEVICE_DATA_C"
    echo "  $DEVICE_COMMAND_C"
    exit 1
fi

# --- –®–∞–≥ 4: –û–±–Ω–æ–≤–ª—è–µ–º libmicroros.a ---
TMP_DIR="/tmp/microros_update_final"
MICRO_ROS_LIB="$PROJECT_ROOT/components/micro_ros_espidf_component/libmicroros.a"

rm -rf "$TMP_DIR"
mkdir -p "$TMP_DIR"
cd "$TMP_DIR"

echo "‚úÖ Step 2: Updating libmicroros.a..."

# –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä–µ–∫—Ç—ã
if [ ! -f "$MICRO_ROS_LIB" ]; then
    echo "‚ùå ERROR: $MICRO_ROS_LIB not found!"
    exit 1
fi
/home/ros2/.espressif/tools/riscv32-esp-elf/esp-14.2.0_20241119/riscv32-esp-elf/bin/riscv32-esp-elf-ar x "$MICRO_ROS_LIB"

# –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –∏ —Ñ–ª–∞–≥–∏
CC="/home/ros2/.espressif/tools/riscv32-esp-elf/esp-14.2.0_20241119/riscv32-esp-elf/bin/riscv32-esp-elf-gcc"
INCLUDE_FLAGS=(
    "-I$PROJECT_ROOT/components/micro_ros_espidf_component/include"
    "-I$PROJECT_ROOT/components/micro_ros_espidf_component/include/rosidl_generator_c"
    "-I$PROJECT_ROOT/components/micro_ros_espidf_component/include/rosidl_typesupport_c"
    "-I$PROJECT_ROOT/components/micro_ros_espidf_component/include/rosidl_runtime_c"
    "-I$PROJECT_ROOT/components/micro_ros_espidf_component/include/rcutils"
)
CPPFLAGS="-DROSIDL_TYPESUPPORT_INTERFACE__EXPORT_HWMAPPING_C -std=c99"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —Ñ–∞–π–ª–∞
compile_file() {
    local c_file=$1
    local obj_name=$(basename ${c_file%.c}).obj
    
    echo "Compiling $c_file -> $obj_name"
    $CC ${INCLUDE_FLAGS[@]} $CPPFLAGS -c "$c_file" -o "$obj_name"
    
    if [ $? -ne 0 ]; then
        echo "‚ùå Compilation of $c_file failed!"
        exit 1
    fi
}

# –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
compile_file "$DEVICE_DATA_C"
compile_file "$DEVICE_COMMAND_C"

# –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É
echo "Rebuilding libmicroros.a..."
/home/ros2/.espressif/tools/riscv32-esp-elf/esp-14.2.0_20241119/riscv32-esp-elf/bin/riscv32-esp-elf-ar rc -s libmicroros.a *.obj

# –ö–æ–ø–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
cp libmicroros.a "$PROJECT_ROOT/components/micro_ros_espidf_component/"
echo "‚úÖ libmicroros.a successfully updated!"

# --- –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
echo "üîç Verifying symbols in the library..."
/home/ros2/.espressif/tools/riscv32-esp-elf/esp-14.0.2_20240528/riscv32-esp-elf/bin/riscv32-esp-elf-nm "$MICRO_ROS_LIB" | grep -E "robot_sensor_hub__msg__Device(Data|Command)"

echo "‚úÖ Setup complete. You can now run 'idf.py build'."