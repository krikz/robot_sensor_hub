// aht30_reader.cpp
// –î—Ä–∞–π–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –¥–∞—Ç—á–∏–∫–∞–º–∏ AHT30 —á–µ—Ä–µ–∑ I2C-–º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä TCA9548A
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –ø–æ –∫–∞–Ω–∞–ª–∞–º
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É RobTillaart/TCA9548 –∏ K0I05/esp_ahtxx

#include <Arduino.h>
#include <TCA9548.h>
#include <ahtxx.h>
#include "config.h"

// –í–Ω–µ—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–æ–±—ä—è–≤–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ main.cpp)
extern TCA9548 tca;
extern ahtxx_handle_t aht_handles[TCA9548A_CHANNEL_COUNT];
extern bool sensor_status[TCA9548A_CHANNEL_COUNT];
extern uint8_t active_sensor_count;
extern int active_sensor_channels[TCA9548A_CHANNEL_COUNT];

// –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∑–¥–µ—Å—å, –Ω–æ extern –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö)
ahtxx_handle_t aht_handles[TCA9548A_CHANNEL_COUNT] = {nullptr};
bool sensor_status[TCA9548A_CHANNEL_COUNT] = {false};
uint8_t active_sensor_count = 0;
int active_sensor_channels[TCA9548A_CHANNEL_COUNT] = { -1 };

/**
 * @brief –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤ AHT30 –Ω–∞ –∫–∞–Ω–∞–ª–∞—Ö TCA9548A
 * 
 * –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º 8 –∫–∞–Ω–∞–ª–∞–º –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä–∞, –ø—ã—Ç–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å AHT30.
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤.
 * –ù–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ = –Ω–æ–º–µ—Ä –¥–∞—Ç—á–∏–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ (–¥–ª—è —Ç–æ–ø–∏–∫–æ–≤ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏).
 */
void init_aht30_sensors() {
  Serial.println("üîç Scanning TCA9548A channels for AHT30 sensors...");

  active_sensor_count = 0;

  for (int channel = 0; channel < TCA9548A_CHANNEL_COUNT; channel++) {
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
    tca.selectChannel(channel);
    delay(10); // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞ (AHT30)
    ahtxx_config_t config = I2C_AHT30_CONFIG_DEFAULT;
    esp_err_t err = ahtxx_init(NULL, &config, &aht_handles[channel]);

    if (err == ESP_OK && aht_handles[channel] != nullptr) {
      sensor_status[channel] = true;
      active_sensor_channels[active_sensor_count] = channel;
      active_sensor_count++;
      Serial.printf("‚úÖ AHT30 Sensor on channel %d: Found and initialized\n", channel);
    } else {
      aht_handles[channel] = nullptr;
      sensor_status[channel] = false;
      Serial.printf("‚ùå AHT30 Sensor on channel %d: Not found (err=%d)\n", channel, err);
    }
  }

  Serial.printf("‚úÖ Initialization complete. %d AHT30 sensor(s) active.\n", active_sensor_count);
}

/**
 * @brief –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö AHT30
 * 
 * @param temps –ú–∞—Å—Å–∏–≤ float-–∑–Ω–∞—á–µ–Ω–∏–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–∏–Ω–¥–µ–∫—Å = –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞)
 * @param hums  –ú–∞—Å—Å–∏–≤ float-–∑–Ω–∞—á–µ–Ω–∏–π –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ (–∏–Ω–¥–µ–∫—Å = –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞)
 * 
 * –ó–∞–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É –∫–∞–Ω–∞–ª–∞. –ï—Å–ª–∏ –¥–∞—Ç—á–∏–∫ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚Äî NaN.
 */
void read_all_aht30(float *temps, float *hums) {
  // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  for (int i = 0; i < TCA9548A_CHANNEL_COUNT; i++) {
    temps[i] = NAN;
    hums[i] = NAN;
  }

  for (uint8_t i = 0; i < active_sensor_count; i++) {
    int channel = active_sensor_channels[i];

    tca.selectChannel(channel);
    delay(10);

    float temperature, humidity;
    esp_err_t result = ahtxx_get_measurement(aht_handles[channel], &temperature, &humidity);

    if (result == ESP_OK) {
      temps[channel] = temperature;
      hums[channel] = humidity;
      sensor_status[channel] = true;
    } else {
      temps[channel] = NAN;
      hums[channel] = NAN;
      sensor_status[channel] = false;
      Serial.printf("‚ö†Ô∏è  AHT30 Sensor %d: Read failed (%s)\n", channel, esp_err_to_name(result));
    }
  }
}