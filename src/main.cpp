// main.cpp
// –£–∑–µ–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–æ–±–æ—Ç–∞: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å, –≤–µ—Å, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–ª–µ—Ä–∞–º–∏
// –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ESP32-C3 + micro-ROS (UDP over WiFi)
// –ü—Ä–æ–µ–∫—Ç: robot_sensor_hub
// –ê–≤—Ç–æ—Ä: –í–∞—à–µ –∏–º—è

#include <Arduino.h>
#include <Wire.h>

// micro-ROS headers
#include <rcl/rcl.h>
#include <rcl/error_handling.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>

// –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
#include <TCA9548.h>
#include <ahtxx.h>
#include <HX711.h>

#include "config.h"

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===

// TCA9548A –∏ AHT30
TCA9548 tca(TCA9548A_ADDR);
ahtxx_handle_t aht_handles[TCA9548A_CHANNEL_COUNT] = {nullptr};
bool sensor_status[TCA9548A_CHANNEL_COUNT] = {false};
uint8_t active_sensor_count = 0;
int active_sensor_channels[TCA9548A_CHANNEL_COUNT] = { -1 };

// HX711 (–≤–µ—Å—ã)
HX711 loadcell;
float calibration_factor = 2280.0; // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ ROS
bool hx711_ok = false;

// –ö—É–ª–µ—Ä–∞
const int FAN_CHANNELS[] = { FAN_PWM_CHANNEL_1, FAN_PWM_CHANNEL_2 };
const int FAN_PINS[] = { FAN1_PWM_PIN, FAN2_PWM_PIN };
float fan_speeds[2] = {0.0, 0.0};

// –î–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤
float temperatures[TCA9548A_CHANNEL_COUNT] = {NAN};
float humidities[TCA9548A_CHANNEL_COUNT] = {NAN};
float weight_value = NAN;

// micro-ROS –æ–±—ä–µ–∫—Ç—ã
rcl_node_t node;
rcl_timer_t timer;
rclc_support_t support;
rclc_executor_t executor;

// === –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π (–∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤) ===
void init_aht30_sensors();
void read_all_aht30(float *temps, float *hums);

void init_hx711();
float read_weight();
void set_calibration_factor(float factor);
void tare_scale();

void init_fan_controller();
void set_fan_speed(int fan_id, float speed);
float get_fan_speed(int fan_id);

void init_publishers(rcl_node_t *node);
void publish_sensor_data(rcl_node_t *node, rcl_timer_t *timer, int64_t last_call_time);
void init_subscribers(rcl_node_t *node);

// === setup() ===
void setup() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Serial
  Serial.begin(115200);
  while (!Serial && millis() < 2000);
  Serial.println("\nüöÄ robot_sensor_hub: Starting up...");

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è I2C
  Wire.begin(I2C_SDA_PIN, I2C_SCL_PIN);
  Serial.println("‚úÖ I2C bus initialized (SDA: GPIO7, SCL: GPIO6)");

  // === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ ===

  // AHT30 —á–µ—Ä–µ–∑ TCA9548A
  init_aht30_sensors();

  // HX711 (–≤–µ—Å—ã)
  init_hx711();

  // –ö—É–ª–µ—Ä–∞ (PWM)
  init_fan_controller();

  // === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è micro-ROS ===
  rcl_ret_t ret;
  rclc_support_init(&support, 0, NULL, &allocator);

  // –°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–∞
  rclc_node_init_default(&node, "sensor_hub", "", &support);
  Serial.println("‚úÖ micro-ROS node created: sensor_hub");

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–±–ª–∏—à–µ—Ä–æ–≤ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  init_publishers(&node);
  init_subscribers(&node);

  // –¢–∞–π–º–µ—Ä –æ–ø—Ä–æ—Å–∞ –¥–∞—Ç—á–∏–∫–æ–≤
  rclc_timer_init_default(
    &timer,
    &support,
    RCL_MS_TO_NS(SENSOR_READ_INTERVAL),
    publish_sensor_data,
    &node
  );

  // Executor (1 —Ç–∞–π–º–µ—Ä + 4 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞)
  rclc_executor_init(&executor, &support.context, 5, &allocator);
  rclc_executor_add_timer(&executor, &timer);

  Serial.println("‚úÖ robot_sensor_hub: Ready and running!");
  Serial.printf("üì° Connecting to micro-ROS agent at %s:%d...\n", STRINGIFY(AGENT_IP), AGENT_PORT);
}

// === loop() ===
void loop() {
  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ micro-ROS
  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));

  // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤
  read_all_aht30(temperatures, humidities);
  weight_value = read_weight();
}