// main.cpp
// –£–∑–µ–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–æ–±–æ—Ç–∞: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å, –≤–µ—Å, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–ª–µ—Ä–∞–º–∏
// –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ESP32-C3 + micro-ROS
// –ê–≤—Ç–æ—Ä: –í–∞—à–µ –∏–º—è
// –ü—Ä–æ–µ–∫—Ç: robot_sensor_hub

#include <Arduino.h>
#include <Wire.h>

// micro-ROS headers
#include <rcl/rcl.h>
#include <rcl/error_handling.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>

#include "config.h"

// –í–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏
extern "C" {
  void init_aht30_sensors();
  void read_all_aht30(float *temps, float *hums);

  void init_hx711();
  float read_weight();

  void init_fan_controller();
  void set_fan_speed(int fan_id, float speed);
  float get_fan_speed(int fan_id);

  void init_publishers(rcl_node_t *node);
  void publish_sensor_data(rcl_node_t *node, rcl_timer_t *timer, int64_t last_call_time);

  void init_subscribers(rcl_node_t *node);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
float temperatures[NUM_AHT30_SENSORS] = {NAN};
float humidities[NUM_AHT30_SENSORS] = {NAN};
float weight_value = NAN;

// –°—Ç–∞—Ç—É—Å –¥–∞—Ç—á–∏–∫–æ–≤
bool sensor_status[NUM_AHT30_SENSORS] = {false};
bool hx711_ok = false;
uint8_t num_aht_sensors = NUM_AHT30_SENSORS;

// micro-ROS –æ–±—ä–µ–∫—Ç—ã
rcl_node_t node;
rcl_timer_t timer;
rclc_support_t support;
rclc_executor_t executor;

void setup() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Serial
  Serial.begin(115200);
  while (!Serial && millis() < 2000); // –ñ–¥—ë–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª
  Serial.println("\nüöÄ robot_sensor_hub: Starting up...");

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è I2C
  Wire.begin(I2C_SDA_PIN, I2C_SCL_PIN);
  Serial.println("‚úÖ I2C bus initialized");

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
  init_aht30_sensors();
  init_hx711();
  init_fan_controller();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è micro-ROS
  rcl_ret_t ret;
  rclc_support_init(&support, 0, NULL, &allocator);

  // –°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–∞
  rclc_node_init_default(&node, "sensor_hub", "", &support);
  Serial.println("‚úÖ micro-ROS node created: sensor_hub");

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–±–ª–∏—à–µ—Ä–æ–≤ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  init_publishers(&node);
  init_subscribers(&node);

  // –¢–∞–π–º–µ—Ä –æ–ø—Ä–æ—Å–∞ –¥–∞—Ç—á–∏–∫–æ–≤
  rclc_timer_init_default(
    &timer,
    &support,
    RCL_MS_TO_NS(SENSOR_READ_INTERVAL),
    publish_sensor_data,
    &node
  );

  // Executor (1 —Ç–∞–π–º–µ—Ä + 4 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞)
  rclc_executor_init(&executor, &support.context, 5, &allocator);
  rclc_executor_add_timer(&executor, &timer);

  Serial.println("‚úÖ robot_sensor_hub: Ready and running!");
  Serial.println("üì° Waiting for micro-ROS agent...");
}

void loop() {
  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ micro-ROS
  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));

  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ä—É—á–Ω–æ–π –æ–ø—Ä–æ—Å (–µ—Å–ª–∏ –Ω–µ —á–µ—Ä–µ–∑ —Ç–∞–π–º–µ—Ä)
  // read_all_aht30(temperatures, humidities);
  // weight_value = read_weight();
}